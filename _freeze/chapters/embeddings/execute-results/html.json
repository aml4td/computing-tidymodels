{
  "hash": "0fda587fa9eace514175e2857cc97a31",
  "result": {
    "engine": "knitr",
    "markdown": "---\nknitr:\n  opts_chunk:\n    cache.path: \"../_cache/embeddings/\"\n---\n\n\n\n\n\n# Embeddings {#sec-embeddings}\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Requirements\n\nYou’ll need 10 packages (<span class=\"pkg\"><a href=\"https://cran.r-project.org/package=bestNormalize\">bestNormalize</a></span>, <span class=\"pkg\"><a href=\"https://cran.r-project.org/package=dimRed\">dimRed</a></span>, <span class=\"pkg\"><a href=\"https://cran.r-project.org/package=embed\">embed</a></span>, <span class=\"pkg\"><a href=\"https://cran.r-project.org/package=fastICA\">fastICA</a></span>, <span class=\"pkg\"><a href=\"https://cran.r-project.org/package=igraph\">igraph</a></span>, <span class=\"pkg\"><a href=\"https://cran.r-project.org/package=modeldatatoo\">modeldatatoo</a></span>, <span class=\"pkg\"><a href=\"https://cran.r-project.org/package=RANN\">RANN</a></span>, <span class=\"pkg\"><a href=\"https://cran.r-project.org/package=RSpectra\">RSpectra</a></span>, <span class=\"pkg\"><a href=\"https://cran.r-project.org/package=tidymodels\">tidymodels</a></span>, and <span class=\"pkg\"><a href=\"https://cran.r-project.org/package=uwot\">uwot</a></span>) for this chapter. \nYou can install them via:\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreq_pkg <- c(\"bestNormalize\", \"dimRed\", \"embed\", \"fastICA\", \"igraph\", \"modeldatatoo\", \"RANN\",\n             \"RSpectra\", \"tidymodels\", \"uwot\")\n\n# Check to see if they are installed: \npkg_installed <- vapply(req_pkg, rlang::is_installed, logical(1))\n\n# Install missing packages: \nif ( any(!pkg_installed) ) {\n  install_list <- names(pkg_installed)[!pkg_installed]\n  pak::pak(install_list)\n}\n```\n:::\n\n\n\n\n\nLet's load the meta package and manage some between-package function conflicts. \n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidymodels)\ntidymodels_prefer()\ntheme_set(theme_bw())\n```\n:::\n\n\n\n\n\n## Example: Predicting Barley Amounts  {#sec-barley}\n\nThe data are contained in the <span class=\"pkg\"><a href=\"https://cran.r-project.org/package=modeldatatoo\">modeldatatoo</a></span> package. Let's load the data, remove two outcome columns that will not be analyzed here, and conduct a three-way split of the data: \n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(modeldatatoo)\n\nchimiometrie_2019 <-\n  data_chimiometrie_2019()  %>%\n  select(-soy_oil, -lucerne)\n\nset.seed(101)\nbarley_split <-\n  initial_validation_split(chimiometrie_2019,\n                           prop = c(0.7, 0.15),\n                           strata = barley)\nbarley_train <- training(barley_split)\nbarley_val   <- validation(barley_split)\nbarley_test  <- testing(barley_split)\n```\n:::\n\n\n\n\n\nThe column names for the predictors are `wvlgth_001` through `wvlgth_550`. \n\nThe primary recipe used for almost all of the embedding methods is:\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(bestNormalize) # for ORD transformation\n\nbarley_rec <-\n  recipe(barley ~ ., data = barley_train) %>%\n  step_orderNorm(all_numeric_predictors()) %>%\n  # Pre-compute these parts to save time\n  prep()\n\nbarley_rec\n#> \n#> ── Recipe ───────────────────────────────────────────────────────────────────────────\n#> \n#> ── Inputs\n#> Number of variables by role\n#> outcome:     1\n#> predictor: 550\n#> \n#> ── Training information\n#> Training data contained 4839 data points and no incomplete rows.\n#> \n#> ── Operations\n#> • orderNorm transformation on: wvlgth_001, wvlgth_002, wvlgth_003, ... | Trained\n```\n:::\n\n\n\n\n\n\n## Linear Transformations  {#sec-linear-embed}\n\nSteps are either in <span class=\"pkg\"><a href=\"https://cran.r-project.org/package=recipes\">recipes</a></span> or <span class=\"pkg\"><a href=\"https://cran.r-project.org/package=embed\">embed</a></span>. Why? \n\n### Principal Component Analysis\n\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbarley_pca_rec <-\n  barley_rec %>%\n  step_pca(all_numeric_predictors(), num_comp = 20, id = \"PCA\") %>% \n  prep()\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npca_scree <- tidy(barley_pca_rec, id = \"PCA\", type = \"variance\")\npca_scree\n#> # A tibble: 2,200 × 4\n#>   terms       value component id   \n#>   <chr>       <dbl>     <int> <chr>\n#> 1 variance 507.5            1 PCA  \n#> 2 variance  35.84           2 PCA  \n#> 3 variance   3.395          3 PCA  \n#> 4 variance   1.511          4 PCA  \n#> 5 variance   0.6940         5 PCA  \n#> 6 variance   0.4265         6 PCA  \n#> # ℹ 2,194 more rows\n\npca_scree %>% count(terms)\n#> # A tibble: 4 × 2\n#>   terms                           n\n#>   <chr>                       <int>\n#> 1 cumulative percent variance   550\n#> 2 cumulative variance           550\n#> 3 percent variance              550\n#> 4 variance                      550\n```\n:::\n\n\n\n\n\nNote that there are 550 entries for each since there are 550 predictor columns. \n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npca_loadings <- tidy(barley_pca_rec, id = \"PCA\")\npca_loadings\n#> # A tibble: 302,500 × 4\n#>   terms         value component id   \n#>   <chr>         <dbl> <chr>     <chr>\n#> 1 wvlgth_001 -0.01696 PC1       PCA  \n#> 2 wvlgth_002 -0.01704 PC1       PCA  \n#> 3 wvlgth_003 -0.01713 PC1       PCA  \n#> 4 wvlgth_004 -0.01723 PC1       PCA  \n#> 5 wvlgth_005 -0.01734 PC1       PCA  \n#> 6 wvlgth_006 -0.01748 PC1       PCA  \n#> # ℹ 302,494 more rows\n```\n:::\n\n\n\n\n\nThere are `550^2 = 302500` possible loadings. \n\nSince we used `num_comp = 20`, there are 20 features that are generated: \n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbarley_pca_rec %>% \n  bake(new_data = NULL, starts_with(\"PC\")) %>% \n  names()\n#>  [1] \"PC01\" \"PC02\" \"PC03\" \"PC04\" \"PC05\" \"PC06\" \"PC07\" \"PC08\" \"PC09\" \"PC10\" \"PC11\"\n#> [12] \"PC12\" \"PC13\" \"PC14\" \"PC15\" \"PC16\" \"PC17\" \"PC18\" \"PC19\" \"PC20\"\n```\n:::\n\n\n\n\n\n\n\n### Independent Component Analysis\n\n### Partial Least Squares {#numeric-pls}\n\n\n## Multidimensional Scaling {#sec-mds}\n\n### Isomap  {#sec-isomap}\n\n### UMAP {#sec-umap}\n\n## Centroid-Based Methods  {#sec-centroids}\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}